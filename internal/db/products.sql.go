// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: products.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addProduct = `-- name: AddProduct :one
WITH current_reception AS (
    SELECT id FROM receptions
    WHERE pvz_id = $1 AND status = 'in_progress'
    LIMIT 1
    FOR SHARE
),
product_insert AS (
    INSERT INTO products (type, reception_id)
    SELECT $2, id FROM current_reception
    RETURNING id, date_time, type, reception_id
)
SELECT id, date_time, type, reception_id FROM product_insert
UNION ALL
SELECT NULL, NULL, NULL, NULL
WHERE NOT EXISTS (SELECT 1 FROM product_insert)
`

type AddProductParams struct {
	PvzID uuid.UUID `db:"pvz_id" json:"pvz_id"`
	Type  string    `db:"type" json:"type"`
}

type AddProductRow struct {
	ID          uuid.UUID    `db:"id" json:"id"`
	DateTime    sql.NullTime `db:"date_time" json:"date_time"`
	Type        string       `db:"type" json:"type"`
	ReceptionID uuid.UUID    `db:"reception_id" json:"reception_id"`
}

func (q *Queries) AddProduct(ctx context.Context, arg AddProductParams) (AddProductRow, error) {
	row := q.queryRow(ctx, q.addProductStmt, addProduct, arg.PvzID, arg.Type)
	var i AddProductRow
	err := row.Scan(
		&i.ID,
		&i.DateTime,
		&i.Type,
		&i.ReceptionID,
	)
	return i, err
}

const deleteLastProduct = `-- name: DeleteLastProduct :one
WITH product_to_delete AS (
    SELECT p.id
    FROM products p
    JOIN receptions r ON p.reception_id = r.id
    WHERE r.pvz_id = $1 AND r.status = 'in_progress'
    ORDER BY p.sequence DESC
    LIMIT 1
    FOR UPDATE SKIP LOCKED
)
DELETE FROM products
WHERE id IN (SELECT id FROM product_to_delete)
RETURNING id
`

func (q *Queries) DeleteLastProduct(ctx context.Context, pvzID uuid.UUID) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.deleteLastProductStmt, deleteLastProduct, pvzID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
