// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: receptions.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const closeReception = `-- name: CloseReception :one
WITH reception_to_close AS (
    SELECT id, date_time, pvz_id, status 
    FROM receptions
    WHERE receptions.pvz_id = $1 AND receptions.status = 'in_progress'
    ORDER BY date_time DESC
    LIMIT 1
    FOR UPDATE NOWAIT
),
updated_reception AS (
    UPDATE receptions r
    SET status = 'close', updated_at = NOW()
    FROM reception_to_close rtc
    WHERE r.id = rtc.id
    RETURNING r.id, r.date_time, r.pvz_id, r.status
)
SELECT id, date_time, pvz_id, status FROM updated_reception
UNION ALL
SELECT id, date_time, pvz_id, status
FROM reception_to_close
WHERE NOT EXISTS (SELECT 1 FROM updated_reception)
LIMIT 1
`

type CloseReceptionRow struct {
	ID       uuid.UUID    `db:"id" json:"id"`
	DateTime sql.NullTime `db:"date_time" json:"date_time"`
	PvzID    uuid.UUID    `db:"pvz_id" json:"pvz_id"`
	Status   string       `db:"status" json:"status"`
}

func (q *Queries) CloseReception(ctx context.Context, pvzID uuid.UUID) (CloseReceptionRow, error) {
	row := q.queryRow(ctx, q.closeReceptionStmt, closeReception, pvzID)
	var i CloseReceptionRow
	err := row.Scan(
		&i.ID,
		&i.DateTime,
		&i.PvzID,
		&i.Status,
	)
	return i, err
}

const createOrGetReception = `-- name: CreateOrGetReception :one
WITH existing_reception AS (
    SELECT id FROM receptions
    WHERE receptions.pvz_id = $1 AND receptions.status = 'in_progress'
    LIMIT 1
    FOR UPDATE SKIP LOCKED
),
new_reception AS (
    INSERT INTO receptions (pvz_id, status)
    SELECT $1, 'in_progress'
    WHERE NOT EXISTS (SELECT 1 FROM existing_reception)
    RETURNING id, date_time, pvz_id, status
)
SELECT id, date_time, pvz_id, status FROM new_reception
UNION ALL
SELECT 
    r.id, 
    r.date_time, 
    r.pvz_id, 
    r.status
FROM existing_reception er
JOIN receptions r ON er.id = r.id
`

type CreateOrGetReceptionRow struct {
	ID       uuid.UUID    `db:"id" json:"id"`
	DateTime sql.NullTime `db:"date_time" json:"date_time"`
	PvzID    uuid.UUID    `db:"pvz_id" json:"pvz_id"`
	Status   string       `db:"status" json:"status"`
}

func (q *Queries) CreateOrGetReception(ctx context.Context, pvzID uuid.UUID) (CreateOrGetReceptionRow, error) {
	row := q.queryRow(ctx, q.createOrGetReceptionStmt, createOrGetReception, pvzID)
	var i CreateOrGetReceptionRow
	err := row.Scan(
		&i.ID,
		&i.DateTime,
		&i.PvzID,
		&i.Status,
	)
	return i, err
}
