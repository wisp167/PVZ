// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, role) 
VALUES ($1, md5($2), $3)
RETURNING id, email, role
`

type CreateUserParams struct {
	Email string `db:"email" json:"email"`
	Md5   []byte `db:"md5" json:"md5"`
	Role  string `db:"role" json:"role"`
}

type CreateUserRow struct {
	ID    uuid.UUID `db:"id" json:"id"`
	Email string    `db:"email" json:"email"`
	Role  string    `db:"role" json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, arg.Email, arg.Md5, arg.Role)
	var i CreateUserRow
	err := row.Scan(&i.ID, &i.Email, &i.Role)
	return i, err
}

const getUserByCredentials = `-- name: GetUserByCredentials :one
SELECT role 
FROM users 
WHERE email = $1 AND password_hash = md5($2)
`

type GetUserByCredentialsParams struct {
	Email string `db:"email" json:"email"`
	Md5   []byte `db:"md5" json:"md5"`
}

func (q *Queries) GetUserByCredentials(ctx context.Context, arg GetUserByCredentialsParams) (string, error) {
	row := q.queryRow(ctx, q.getUserByCredentialsStmt, getUserByCredentials, arg.Email, arg.Md5)
	var role string
	err := row.Scan(&role)
	return role, err
}
